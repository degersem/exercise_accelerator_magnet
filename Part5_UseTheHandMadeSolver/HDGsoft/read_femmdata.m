function femmdata=read_femmdata(finfilename)

% function femmdata=read_femmdata(finfilename)
% reads all data provided in a .ans file generated by FEMM
%
% input parameters
%    finfilename      : file name or file pointer
%
% output parameter
%    femmdata : FEMM data
%
% author: Herbert De Gersem
%
% (c) This software is intended for didactical purposes. It comes without any warranty.
%     It may not be used for commercial purposes without notice to the authors.
%     It may be distributed freely in the KU Leuven, TU Darmstadt, TU Graz, Univ. Lille 1,
%     BU Wuppertal and RWTH Aachen. Any copy should include this message.

% A. Parameter check
if ischar(finfilename)
  fin=fopen(finfilename,'r');
else
  fin=finfilename;
end
physics_type=determine_physics_type(finfilename);
switch physics_type
  case 'magnetic'
    numcolsegments=6;
  case 'electric'
    numcolsegments=7;
  otherwise
    error('to be implemented');
end
% B. Read everything
while ~feof(fin)
  ln=fgetl(fin);
  [first,ln]=strtok(ln);
  if ~isempty(first)
    [second,ln]=strtok(ln);
    [third,ln]=strtok(ln);
    if (first(1)=='[') && (first(end)==']')
      first=first(2:end-1);
    end
    if second=='='
      femmdata.(first)=third;
    end
    switch first
      case {'Depth'}                 % single double number
        femmdata.(first)=sscanf(femmdata.(first),'%f');
      case {'PointProps','BdryProps','BlockProps','CircuitProps','ConductorProps'}
        num=sscanf(femmdata.(first),'%d');
        if num==0
          femmdata.(first)=[];
        else
          femmdata=rmfield(femmdata,first);
        end
        for p=1:num
          % D.1. Name
          [subfirst,ln]=strtok(fgetl(fin));    % <BeginBdry>
          if (subfirst(1)~='<') || (subfirst(end)~='>')
            error('sth wrong1');
          end
          if (subfirst(2:6)~='Begin')
            error('sth wrong2');
          end
          propname=subfirst(7:end-1);
          [subfirst,ln]=strtok(fgetl(fin));
          while ~strcmp(subfirst,['<End' propname '>'])
            [subsecond,ln]=strtok(ln);
            [subthird,ln]=strtok(ln);
            if (subfirst(1)~='<') || (subfirst(end)~='>')
              error('sth wrong3');
            end
            subfirst=subfirst(2:end-1);
            if subsecond~='='
              error('sth wrong4');
            end
            if ~strcmp(subfirst,'BHPoints')
              femmdata.(first)(p).(subfirst)=subthird;
            else
              numBHpoint=sscanf(subthird,'%d');
              BH=zeros(numBHpoint,2);
              for qqq=1:numBHpoint
                ln=fgetl(fin); BH(qqq,:)=sscanf(ln,'%f %f');
              end
              femmdata.first(p).BHPoints=BH;
            end
            [subfirst,ln]=strtok(fgetl(fin));
          end
        end
      case 'NumPoints'
        numpoints=sscanf(femmdata.NumPoints,'%d');
        femmdata=rmfield(femmdata,'NumPoints');
        femmdata.points=fscanf(fin,'%f',[4 numpoints])';
      case 'NumSegments'
        numsegments=sscanf(femmdata.NumSegments,'%d');
        femmdata=rmfield(femmdata,'NumSegments');
        femmdata.segments=fscanf(fin,'%f',[numcolsegments numsegments])';
      case 'NumArcSegments'
        numarcsegments=sscanf(femmdata.NumArcSegments,'%d');
        femmdata=rmfield(femmdata,'NumArcSegments');
        femmdata.arcsegments=fscanf(fin,'%f',[7 numarcsegments])';
      case 'NumHoles'
        numholes=sscanf(femmdata.NumHoles,'%d');
        femmdata.holes=fscanf(fin,'%f',[3 numholes])';
      case 'NumBlockLabels'
        numblocklabels=sscanf(femmdata.NumBlockLabels,'%d');
        femmdata=rmfield(femmdata,'NumBlockLabels');
        femmdata.blocklabels=fscanf(fin,'%f',[9 numblocklabels])';
      case 'Solution'
        % NODES
        numnode=fscanf(fin,'%d',1);
        ln=fgetl(fin);                      % discard the line termination
        ln=fgetl(fin);                      % read the first line to check whether a real-valued or a complex-valued solution is given
        [values,num]=sscanf(ln,'%f');
        values=[values'; fscanf(fin,'%f',[num numnode-1])'];
        if strcmp(femmdata.Frequency,'0')   % static problem
          femmdata.node=values(:,1:3);
          switch num
            case 3, femmdata.Version=2011;
            case 4, femmdata.Version=2016;
            otherwise, error('Unrecognised FEMM version');
          end
        else                                % time-harmonic problem
          femmdata.node=[values(:,1:2) values(:,3)+sqrt(-1)*values(:,4)];
          switch num
            case 4, femmdata.Version=2011;
            case 5, femmdata.Version=2016;
            otherwise, error('Unrecognised FEMM version');
          end
        end
        % ELEMENTS
        numelem=fscanf(fin,'%d',1);
        ln=fgetl(fin);                      % discard the line termination
        ln=fgetl(fin);                      % read the first line to check whether a real-valued or a complex-valued solution is given
        [values,num]=sscanf(ln,'%f');
        values=[values'; fscanf(fin,'%f',[num numelem-1])'];
        femmdata.elem=values(:,1:4);        
        % REMINDER
        numwhatisthis=fscanf(fin,'%d',1);
        femmdata.whatisthis=fscanf(fin,'%d',[2 numwhatisthis])';        
    end
  end
end

% C. Finish
if ischar(finfilename)
  fclose(fin);
end

